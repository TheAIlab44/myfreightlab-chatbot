// === history.js : Sidebar Historique dynamique ===

// Configurations
const historyPanelID = 'historyPanel';
const historyToggleID = 'toggleHistory';
const historyContentID = 'historyContent';
const historyStorageKey = 'chatTitles'; // LocalStorage pour les titres personnalis√©s
const historyAPIEndpoint = 'https://myfreightlab.app.n8n.cloud/webhook/TON_WEBHOOK_HISTORIQUE'; // Remplacer par ton webhook

// Elements HTML ajout√©s dynamiquement
const historyButton = document.createElement('div');
historyButton.className = 'floating-toggle';
historyButton.id = historyToggleID;
historyButton.style.left = '0';
historyButton.style.right = 'auto';
historyButton.style.top = '50%';
historyButton.style.transform = 'translateY(-50%)';
historyButton.innerHTML = 'üïí';
document.body.appendChild(historyButton);

const historySidebar = document.createElement('div');
historySidebar.className = 'dynamic-sidebar';
historySidebar.id = historyPanelID;
historySidebar.style.right = '0';
historySidebar.style.left = 'auto';
historySidebar.innerHTML = `
  <div class="sidebar-header">üïí Historique des chats</div>
  <div class="sidebar-content" id="${historyContentID}"></div>
`;
document.body.appendChild(historySidebar);

// Toggle Sidebar
historyButton.addEventListener('click', () => {
  historySidebar.classList.toggle('open');
});

// Charger l'historique au lancement
async function loadHistorySidebar(user_id) {
  try {
    const response = await fetch(historyAPIEndpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: user_id })
    });
    const history = await response.json();
    createSidebarEntries(history);
  } catch (error) {
    console.error('Erreur de chargement historique:', error);
  }
}

// Cr√©er les entr√©es dans la sidebar
function createSidebarEntries(history) {
  const sidebarContent = document.getElementById(historyContentID);
  sidebarContent.innerHTML = '';

  const titles = JSON.parse(localStorage.getItem(historyStorageKey) || '{}');

  history.forEach(chat => {
    const container = document.createElement('div');
    container.className = 'prompt';

    const chatDate = new Date(parseInt(chat.chat_id.split('_')[1]));
    const defaultTitle = `Chat du ${chatDate.toLocaleDateString('fr-FR')} ${chatDate.toLocaleTimeString('fr-FR', {hour: '2-digit', minute:'2-digit'})}`;
    const title = titles[chat.chat_id] || defaultTitle;

    container.innerHTML = `
      <span class="chat-title">${title}</span>
      <button onclick="renameChat('${chat.chat_id}')">üñäÔ∏è</button>
      <button onclick="deleteChat('${chat.chat_id}')">üóëÔ∏è</button>
    `;

    container.addEventListener('click', (e) => {
      if (e.target.tagName.toLowerCase() !== 'button') {
        loadChat(chat.chat_id);
      }
    });

    sidebarContent.appendChild(container);
  });
}

// Renommer un chat
function renameChat(chatId) {
  const titles = JSON.parse(localStorage.getItem(historyStorageKey) || '{}');
  const newTitle = prompt('Nouveau nom du chat :');
  if (newTitle) {
    titles[chatId] = newTitle;
    localStorage.setItem(historyStorageKey, JSON.stringify(titles));
    loadHistorySidebar(window.user_id);
  }
}

// Supprimer un chat
function deleteChat(chatId) {
  if (!confirm('Supprimer ce chat ?')) return;
  const titles = JSON.parse(localStorage.getItem(historyStorageKey) || '{}');
  delete titles[chatId];
  localStorage.setItem(historyStorageKey, JSON.stringify(titles));
  // Id√©alement ici, faire aussi une suppression en base de donn√©es
  loadHistorySidebar(window.user_id);
}

// Charger une ancienne conversation (version simple)
async function loadChat(chatId) {
  chat.innerHTML = '';
  chat_id = chatId;
  try {
    const response = await fetch('https://myfreightlab.app.n8n.cloud/webhook/TON_WEBHOOK_MESSAGES', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId })
    });
    const messages = await response.json();
    messages.forEach(msg => {
      appendMessage(msg.content, msg.role === 'user' ? 'user-message' : 'bot-message');
    });
  } catch (error) {
    console.error('Erreur de chargement du chat:', error);
  }
}
